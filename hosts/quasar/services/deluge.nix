{ config, pkgs, lib, ... }:

with lib;
let
  cfg = config.nas;

  mkNtv = conf: mkIf (!cfg.useNative) conf;
  mkCtr = conf: mkIf cfg.useNative conf;
  mkConf = name: cfg.paths.config + "/" + name + ":/config";
  mkDl = name: cfg.paths.downloads + "/" + name + ":/downloads";

  webConfig = { };
  webConfigFile = pkgs.writeText "web.conf" (builtins.toJSON webConfig);

  configDir = "${config.services.deluge.dataDir}/.config/deluge";
  declarativeLockFile = "${configDir}/.declarative";

  preStart = if config.services.deluge.declarative then ''
    if [ -e ${declarativeLockFile} ]; then
      # Was declarative before, no need to back up anything
      cp ${webConfigFile} ${configDir}/core.conf
    else
      # Declarative for the first time, backup stateful files
      cp -b --suffix=.stateful ${webConfigFile} ${configDir}/web.conf
      echo "Autogenerated file that signifies that this server configuration is managed declaratively by NixOS" \
        > ${declarativeLockFile}
    fi
  '' else ''
    if [ -e ${declarativeLockFile} ]; then
      rm ${declarativeLockFile}
    fi
  '';
in {
  services = {
    deluge = mkNtv {
      enable = true;

      user = cfg.user;
      group = cfg.group;

      dataDir = cfg.paths.data + "/deluge";
      extraPackages = with pkgs; [ ];

      web = {
        enable = true;
        port = cfg.ports.deluge;
        openFirewall = true;
      };

      declarative = false;
      authFile = config.sops.secrets.deluge-auth.path;
      openFirewall = true;

      config = {
        allow_remote = true;
        download_location = "${cfg.paths.downloads}/deluge";
        enabled_plugins = [ "Label" ];
      };
    };
  };

  systemd.services.delugeweb.preStart = mkIf (!cfg.useNative) preStart;

  virtualisation.oci-containers.containers.deluge = mkCtr {
    image = "lscr.io/linuxserver/deluge";
    ports = [ "${cfg.ports.deluge}:8112" "6881:6881" "6881:6881/udp" ];
    environment = defaultEnv;
    volumes = [ (mkConf "deluge") (mkDl "deluge") ];
  };

  sops.secrets.deluge-auth = {
    sopsFile = ../secrets.yaml;
    owner = cfg.user;
    mode = "0644";
  };
}
